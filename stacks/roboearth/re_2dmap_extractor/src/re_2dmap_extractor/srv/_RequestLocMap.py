"""autogenerated by genpy from re_2dmap_extractor/RequestLocMapRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import re_msgs.msg

class RequestLocMapRequest(genpy.Message):
  _md5sum = "a31bdc686743a8e0baa91632efca1e98"
  _type = "re_2dmap_extractor/RequestLocMapRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """re_msgs/RosFile octoMap
float64 z
string targetMapName


================================================================================
MSG: re_msgs/RosFile
# This file representation is used to pass binary data to the RoboEarthDB.
# As the endianess isn't stored, only files with a byte order mark (BOM) or
# an implicitly specified endianess should be transferred.
string name   # file name
int8[] data   # binary data 

"""
  __slots__ = ['octoMap','z','targetMapName']
  _slot_types = ['re_msgs/RosFile','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       octoMap,z,targetMapName

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestLocMapRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.octoMap is None:
        self.octoMap = re_msgs.msg.RosFile()
      if self.z is None:
        self.z = 0.
      if self.targetMapName is None:
        self.targetMapName = ''
    else:
      self.octoMap = re_msgs.msg.RosFile()
      self.z = 0.
      self.targetMapName = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.octoMap.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.octoMap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.octoMap.data))
      buff.write(_struct_d.pack(self.z))
      _x = self.targetMapName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.octoMap is None:
        self.octoMap = re_msgs.msg.RosFile()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.octoMap.name = str[start:end].decode('utf-8')
      else:
        self.octoMap.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.octoMap.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.z,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targetMapName = str[start:end].decode('utf-8')
      else:
        self.targetMapName = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.octoMap.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.octoMap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.octoMap.data.tostring())
      buff.write(_struct_d.pack(self.z))
      _x = self.targetMapName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.octoMap is None:
        self.octoMap = re_msgs.msg.RosFile()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.octoMap.name = str[start:end].decode('utf-8')
      else:
        self.octoMap.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.octoMap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 8
      (self.z,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targetMapName = str[start:end].decode('utf-8')
      else:
        self.targetMapName = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
"""autogenerated by genpy from re_2dmap_extractor/RequestLocMapResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import re_msgs.msg

class RequestLocMapResponse(genpy.Message):
  _md5sum = "0cdfbb487eae2b1a99678f5623ad0e0e"
  _type = "re_2dmap_extractor/RequestLocMapResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
re_msgs/RosFile locMap
re_msgs/RosFile locMeta



================================================================================
MSG: re_msgs/RosFile
# This file representation is used to pass binary data to the RoboEarthDB.
# As the endianess isn't stored, only files with a byte order mark (BOM) or
# an implicitly specified endianess should be transferred.
string name   # file name
int8[] data   # binary data 

"""
  __slots__ = ['success','locMap','locMeta']
  _slot_types = ['bool','re_msgs/RosFile','re_msgs/RosFile']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,locMap,locMeta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestLocMapResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.locMap is None:
        self.locMap = re_msgs.msg.RosFile()
      if self.locMeta is None:
        self.locMeta = re_msgs.msg.RosFile()
    else:
      self.success = False
      self.locMap = re_msgs.msg.RosFile()
      self.locMeta = re_msgs.msg.RosFile()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
      _x = self.locMap.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.locMap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.locMap.data))
      _x = self.locMeta.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.locMeta.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.locMeta.data))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.locMap is None:
        self.locMap = re_msgs.msg.RosFile()
      if self.locMeta is None:
        self.locMeta = re_msgs.msg.RosFile()
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locMap.name = str[start:end].decode('utf-8')
      else:
        self.locMap.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.locMap.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locMeta.name = str[start:end].decode('utf-8')
      else:
        self.locMeta.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.locMeta.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
      _x = self.locMap.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.locMap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.locMap.data.tostring())
      _x = self.locMeta.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.locMeta.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.locMeta.data.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.locMap is None:
        self.locMap = re_msgs.msg.RosFile()
      if self.locMeta is None:
        self.locMeta = re_msgs.msg.RosFile()
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locMap.name = str[start:end].decode('utf-8')
      else:
        self.locMap.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.locMap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locMeta.name = str[start:end].decode('utf-8')
      else:
        self.locMeta.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.locMeta.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class RequestLocMap(object):
  _type          = 're_2dmap_extractor/RequestLocMap'
  _md5sum = 'ff776d365b44637e4e3b054f6c62341b'
  _request_class  = RequestLocMapRequest
  _response_class = RequestLocMapResponse
