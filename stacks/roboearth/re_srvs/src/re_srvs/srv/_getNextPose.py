"""autogenerated by genpy from re_srvs/getNextPoseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class getNextPoseRequest(genpy.Message):
  _md5sum = "68f88dbab9859bab49fcc8cd2125bed2"
  _type = "re_srvs/getNextPoseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose currentPose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['currentPose']
  _slot_types = ['geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currentPose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getNextPoseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.currentPose is None:
        self.currentPose = geometry_msgs.msg.Pose()
    else:
      self.currentPose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.currentPose.position.x, _x.currentPose.position.y, _x.currentPose.position.z, _x.currentPose.orientation.x, _x.currentPose.orientation.y, _x.currentPose.orientation.z, _x.currentPose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.currentPose is None:
        self.currentPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.currentPose.position.x, _x.currentPose.position.y, _x.currentPose.position.z, _x.currentPose.orientation.x, _x.currentPose.orientation.y, _x.currentPose.orientation.z, _x.currentPose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.currentPose.position.x, _x.currentPose.position.y, _x.currentPose.position.z, _x.currentPose.orientation.x, _x.currentPose.orientation.y, _x.currentPose.orientation.z, _x.currentPose.orientation.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.currentPose is None:
        self.currentPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.currentPose.position.x, _x.currentPose.position.y, _x.currentPose.position.z, _x.currentPose.orientation.x, _x.currentPose.orientation.y, _x.currentPose.orientation.z, _x.currentPose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
"""autogenerated by genpy from re_srvs/getNextPoseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class getNextPoseResponse(genpy.Message):
  _md5sum = "3e1379b95e678c619009db32fe035ffe"
  _type = "re_srvs/getNextPoseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose commandPose
bool learningFinished


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['commandPose','learningFinished']
  _slot_types = ['geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       commandPose,learningFinished

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getNextPoseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.commandPose is None:
        self.commandPose = geometry_msgs.msg.Pose()
      if self.learningFinished is None:
        self.learningFinished = False
    else:
      self.commandPose = geometry_msgs.msg.Pose()
      self.learningFinished = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.commandPose.position.x, _x.commandPose.position.y, _x.commandPose.position.z, _x.commandPose.orientation.x, _x.commandPose.orientation.y, _x.commandPose.orientation.z, _x.commandPose.orientation.w, _x.learningFinished))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.commandPose is None:
        self.commandPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.commandPose.position.x, _x.commandPose.position.y, _x.commandPose.position.z, _x.commandPose.orientation.x, _x.commandPose.orientation.y, _x.commandPose.orientation.z, _x.commandPose.orientation.w, _x.learningFinished,) = _struct_7dB.unpack(str[start:end])
      self.learningFinished = bool(self.learningFinished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7dB.pack(_x.commandPose.position.x, _x.commandPose.position.y, _x.commandPose.position.z, _x.commandPose.orientation.x, _x.commandPose.orientation.y, _x.commandPose.orientation.z, _x.commandPose.orientation.w, _x.learningFinished))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.commandPose is None:
        self.commandPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.commandPose.position.x, _x.commandPose.position.y, _x.commandPose.position.z, _x.commandPose.orientation.x, _x.commandPose.orientation.y, _x.commandPose.orientation.z, _x.commandPose.orientation.w, _x.learningFinished,) = _struct_7dB.unpack(str[start:end])
      self.learningFinished = bool(self.learningFinished)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7dB = struct.Struct("<7dB")
class getNextPose(object):
  _type          = 're_srvs/getNextPose'
  _md5sum = '380505756efd551cb201fc9bfa85fa88'
  _request_class  = getNextPoseRequest
  _response_class = getNextPoseResponse
