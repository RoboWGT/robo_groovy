"""autogenerated by genpy from re_srvs/SearchObjectsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SearchObjectsRequest(genpy.Message):
  _md5sum = "2d2d663456e9fa76707235a598ce31c7"
  _type = "re_srvs/SearchObjectsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string searchID


"""
  __slots__ = ['searchID']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       searchID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SearchObjectsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.searchID is None:
        self.searchID = ''
    else:
      self.searchID = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.searchID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.searchID = str[start:end].decode('utf-8')
      else:
        self.searchID = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.searchID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.searchID = str[start:end].decode('utf-8')
      else:
        self.searchID = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from re_srvs/SearchObjectsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import re_msgs.msg

class SearchObjectsResponse(genpy.Message):
  _md5sum = "74c585e4393b940b47d10bbd4d351f9f"
  _type = "re_srvs/SearchObjectsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
string[] uids
string[] objects
re_msgs/StringArray[] filenames
re_msgs/StringArray[] fileURLs


================================================================================
MSG: re_msgs/StringArray
# A StringArray message contains an array of strings. This is used by other 
# message/service declarations in order to create 2-dimensional string 
# arrays with different lengths for one dimension (StringArray[])
string[] list   # array of strings

"""
  __slots__ = ['success','uids','objects','filenames','fileURLs']
  _slot_types = ['bool','string[]','string[]','re_msgs/StringArray[]','re_msgs/StringArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,uids,objects,filenames,fileURLs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SearchObjectsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.uids is None:
        self.uids = []
      if self.objects is None:
        self.objects = []
      if self.filenames is None:
        self.filenames = []
      if self.fileURLs is None:
        self.fileURLs = []
    else:
      self.success = False
      self.uids = []
      self.objects = []
      self.filenames = []
      self.fileURLs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
      length = len(self.uids)
      buff.write(_struct_I.pack(length))
      for val1 in self.uids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.filenames)
      buff.write(_struct_I.pack(length))
      for val1 in self.filenames:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.list:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.fileURLs)
      buff.write(_struct_I.pack(length))
      for val1 in self.fileURLs:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.list:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.filenames is None:
        self.filenames = None
      if self.fileURLs is None:
        self.fileURLs = None
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.uids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.filenames = []
      for i in range(0, length):
        val1 = re_msgs.msg.StringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.list = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.list.append(val2)
        self.filenames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fileURLs = []
      for i in range(0, length):
        val1 = re_msgs.msg.StringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.list = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.list.append(val2)
        self.fileURLs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
      length = len(self.uids)
      buff.write(_struct_I.pack(length))
      for val1 in self.uids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.filenames)
      buff.write(_struct_I.pack(length))
      for val1 in self.filenames:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.list:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.fileURLs)
      buff.write(_struct_I.pack(length))
      for val1 in self.fileURLs:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.list:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.filenames is None:
        self.filenames = None
      if self.fileURLs is None:
        self.fileURLs = None
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.uids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.filenames = []
      for i in range(0, length):
        val1 = re_msgs.msg.StringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.list = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.list.append(val2)
        self.filenames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fileURLs = []
      for i in range(0, length):
        val1 = re_msgs.msg.StringArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.list = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.list.append(val2)
        self.fileURLs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SearchObjects(object):
  _type          = 're_srvs/SearchObjects'
  _md5sum = '2dfe23d35da7ced197e999d2dd7125f1'
  _request_class  = SearchObjectsRequest
  _response_class = SearchObjectsResponse
